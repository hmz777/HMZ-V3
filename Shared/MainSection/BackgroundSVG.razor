@implements IAsyncDisposable

<svg id="Mountains" xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1600 900'>
    <rect fill='#0c0032' width='1600' height='900' />
    <polygon fill='#190061' points='957 450 539 900 1396 900' />
    <polygon fill='#3500d3' points='957 450 872.9 900 1396 900' />
    <polygon fill='#1b006a' points='-60 900 398 662 816 900' />
    <polygon fill='#3d16ae' points='337 900 398 662 816 900' />
    <polygon fill='#1e0073' points='1203 546 1552 900 876 900' />
    <polygon fill='#3f1f8a' points='1203 546 1552 900 1162 900' />
    <polygon fill='#20007d' points='641 695 886 900 367 900' />
    <polygon fill='#3b2468' points='587 900 641 695 886 900' />
    <polygon fill='#220086' points='1710 900 1401 632 1096 900' />
    <polygon fill='#342747' points='1710 900 1401 632 1365 900' />
    <polygon fill='#240090' points='1210 900 971 687 725 900' />
    <polygon fill='#282828' points='943 900 1210 900 971 687' />
</svg>

@code {
    [Inject] IJSRuntime JSRuntime { get; set; }

    IJSObjectReference AnimeJsModule;

    protected async override Task OnInitializedAsync()
    {
        AnimeJsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/modules/animejsModule.js");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await AnimeJsModule.InvokeVoidAsync("BackgroundAnimation");
        }
    }

    public async ValueTask DisposeAsync()
    {
        await AnimeJsModule.DisposeAsync();
    }
}
