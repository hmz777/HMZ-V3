@using HMZ_V3.Models.Contact
@using HMZ_V3.Services
@using System.Timers
@implements IDisposable

<div class="status-message @State @MessageStatus">
    @if (MessageStatus == MessageStatus.Success)
    {
        <i class="las la-check-circle la-3x"></i>
    }
    else
    {
        <i class="las la-times-circle la-3x"></i>
    }
    <div class="content">
        @Message
    </div>
</div>

@code {
    [Inject] NotificationNotifierService NotificationNotifierService { get; set; }
    public MessageStatus MessageStatus { get; set; }
    public string Message { get; set; }
    private string State { get; set; } = "slide-upwards";

    protected override void OnInitialized()
    {
        NotificationNotifierService.Notify += Show;
    }

    public async Task Show(string message, MessageStatus messageStatus)
    {
        await InvokeAsync(() =>
        {
            this.Message = message;
            this.MessageStatus = messageStatus;
            State = "slide-downwards";
            StateHasChanged();

            var timer = new Timer()
            {
                Interval = 5000,
            };

            timer.Elapsed += (obj, eventArgs) =>
            {
                Close();
                timer.Enabled = false;
                timer.Dispose();
            };

            timer.Enabled = true;
        });
    }

    public void Close()
    {
        State = "slide-upwards";
        StateHasChanged();
    }

    public void Dispose()
    {
        NotificationNotifierService.Notify -= Show;
    }
}
