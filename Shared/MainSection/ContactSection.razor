@implements IDisposable
@using HMZ_V3.Shared.MainSection.Contact
@using HMZ_V3.Models.Contact
@using HMZ_V3.Services
@using System.Text.Json
@using System.Text

<div class="hero-card hero-card--dark hero-nav-item ripple-animation" id="contact">
    <div class="modal modal-dark" id="contact-modal">
        <header class="modal-header" id="contact-header">
            <div class="modal-header-inner">
                <button></button>
                <h2>Contact</h2>
            </div>
        </header>
        <div class="modal-body" id="contact-body">
            <EditForm EditContext="EditContext" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" id="contact-form">
                <DataAnnotationsValidator />
                <span class="form-title">Contact me through here, but note that:</span>
                <div class="flex-row justify-content-between">
                    <div class="input-wrapper">
                        <div class="form-input">
                            <CustomInputText class="form-field" type="text" id="name" @bind-Value="MessageModel.FullName" />
                            <i class="las la-user"></i>
                            <label for="name">Full name is required</label>
                        </div>
                        <ValidationMessage For="() => MessageModel.FullName"></ValidationMessage>
                    </div>
                    <div class="input-wrapper">
                        <div class="form-input">
                            <CustomInputText class="form-field" type="text" id="email" @bind-Value="MessageModel.Email" />
                            <i class="las la-at"></i>
                            <label for="email">Email also required</label>
                        </div>
                        <ValidationMessage For="() => MessageModel.Email"></ValidationMessage>
                    </div>
                </div>
                <div class="input-wrapper">
                    <div class="form-input">
                        <CustomInputText class="form-field" type="text" id="subject" @bind-Value="MessageModel.Subject" />
                        <i class="las la-info"></i>
                        <label for="subject">Subject is up to you</label>
                    </div>
                    <ValidationMessage For="() => MessageModel.Subject"></ValidationMessage>
                </div>
                <div class="input-wrapper input-wrapper--full">
                    <div class="form-input">
                        <CustomInputTextArea rows="5" class="form-field" id="message" @bind-Value="MessageModel.Message"></CustomInputTextArea>
                        <i class="las la-comment-alt"></i>
                        <label for="message">As well as the message content</label>
                    </div>
                    <ValidationMessage For="() => MessageModel.Message"></ValidationMessage>
                </div>
                <button class="form-button button-submit @SubmitButtonState" type="submit">                    
                    <span>Send Message</span>
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Inject] NotificationNotifierService NotificationNotifierService { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    private MessageModel MessageModel { get; set; } = new MessageModel();
    private EditContext EditContext { get; set; }
    private IJSObjectReference ContactModule;
    private string SubmitButtonState { get; set; } = "";

    [Inject] HttpClient HttpClient { get; set; }

    protected async override Task OnInitializedAsync()
    {
        EditContext = new EditContext(MessageModel);
        ContactModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/modules/contactModule.js");
    }

    private async Task HandleValidSubmit()
    {
        SubmitButtonState = "loading";

        //var message = new HttpRequestMessage(HttpMethod.Post, "https://formspree.io/f/mzbkrpry");
        //message.Headers.Clear();
        //message.SetBrowserRequestMode(BrowserRequestMode.Cors);
        //message.Content = new StringContent(JsonSerializer.Serialize(EditContext.Model), Encoding.UTF8, "application/json");
        //await HttpClient.SendAsync(message, HttpCompletionOption.ResponseContentRead);

        //SubmitButtonState = "";

        MessageModel = new MessageModel();
        EditContext = new EditContext(MessageModel);

        await NotificationNotifierService.Inform("Message sent!", MessageStatus.Success);
    }

    private async Task HandleInvalidSubmit()
    {
        await NotificationNotifierService.Inform("Invalid information! Get it right this time.", MessageStatus.Error);
    }

    public void Dispose()
    {
        HttpClient.Dispose();
    }
}
