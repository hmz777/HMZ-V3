@implements IDisposable
@using HMZ_V3.Shared.MainSection.Contact
@using HMZ_V3.Models.Contact
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers

<div class="modal modal-dark" id="contact-modal">
    <header class="modal-header" id="contact-header">
        <div class="modal-header-inner">
            <button></button>
            <h2>Contact</h2>
        </div>
    </header>
    <div class="modal-body" id="contact-body">
        <EditForm EditContext="EditContext" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" id="contact-form">
            <DataAnnotationsValidator />
            <span class="form-title">Contact me through here, but note that:</span>
            <div class="input-wrapper">
                <label for="Name">Full name is required</label>
                <InputText type="text" @bind-Value="MessageModel.FullName" placeholder="Enter your name" />
                <ValidationMessage For="@(() => MessageModel.FullName)" />
            </div>
            <div class="input-wrapper">
                <label for="Email">Email also required</label>
                <InputText type="email" @bind-Value="MessageModel.Email" placeholder="Enter your email" />
                <ValidationMessage For="@(() => MessageModel.Email)" />
            </div>
            <div class="input-wrapper">
                <label for="Subject">Subject is up to you</label>
                <InputText type="text" @bind-Value="MessageModel.Subject" placeholder="Enter message subject" />
                <ValidationMessage For="@(() => MessageModel.Subject)" />
            </div>
            <div class="input-wrapper">
                <label for="Message">As well as the message content</label>
                <InputTextArea @bind-Value="MessageModel.Message" rows="5" placeholder="Enter your message"></InputTextArea>
                <ValidationMessage For="@(() => MessageModel.Message)" />
            </div>
            <button class="form-button button-submit" type="submit"><i class="las la-circle-notch la-spin @SubmitButtonState"></i> Send Message</button>
        </EditForm>
    </div>
</div>

@code {
    private MessageModel MessageModel { get; set; } = new MessageModel();
    private StatusMessage StatusMessage { get; set; }
    private EditContext EditContext { get; set; }
    private string SubmitButtonState { get; set; } = "d-none";

    [Inject] HttpClient HttpClient { get; set; }

    protected override void OnInitialized()
    {
        EditContext = new EditContext(MessageModel);
    }

    private async Task HandleValidSubmit()
    {
        SubmitButtonState = "";

        var message = new HttpRequestMessage(HttpMethod.Post, "https://formspree.io/f/mzbkrpry");
        message.Headers.Clear();
        message.SetBrowserRequestMode(BrowserRequestMode.Cors);
        message.Content = new StringContent(JsonSerializer.Serialize(EditContext.Model), Encoding.UTF8, "application/json");
        await HttpClient.SendAsync(message, HttpCompletionOption.ResponseContentRead);
        SubmitButtonState = "d-none";

        MessageModel = new MessageModel();
        EditContext = new EditContext(MessageModel);
        StatusMessage.Message = "Message sent successfully!";
        StatusMessage.MessageStatus = MessageStatus.Success;
        StatusMessage.Show();
    }

    private void HandleInvalidSubmit()
    {
        StatusMessage.Message = "Invalid message! please correct the errors in the form.";
        StatusMessage.MessageStatus = MessageStatus.Error;
        StatusMessage.Show();
    }

    public void Dispose()
    {
        HttpClient.Dispose();
    }
}
